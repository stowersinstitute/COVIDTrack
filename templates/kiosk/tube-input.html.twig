{% macro renderCancelButton() %}
    <button type="button" class="btn btn-danger btn-xs" data-toggle="modal" data-target="#cancelDropOff">
        <i class="fa fa-fw fa-trash"></i>
        Cancel Drop Off
    </button>
{% endmacro %}

{% extends 'kiosk/kiosk-base.html.twig' %}

{% block page_title %}COVIDTrack Kiosk{% endblock %}

{% block body %}
    <div class="row margin-bottom">
        <div class="col-xs-12">
            {% block header_buttons %}
            <div class="pull-right" id="buttons-before-tube-entered">
                {{ _self.renderCancelButton() }}
                {% if kioskSession.tubeData|length > 0 %}
                <a href="{{ path('kiosk_review', {'id':kioskSession.id}) }}" class="btn btn-success btn-xs">
                    Review <i class="fa fa-fw fa-chevron-right"></i>
                </a>
                {% endif %}
            </div>
            {% endblock %}
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            {% block body_content %}

            {{ form_start(form) }}
            {{ form_errors(form) }}
            <div class="row" id="tube-input-group">
                <div class="col-xs-12">
                    {{ form_row(form.accessionId, {
                        'label': false,
                        'attr': {'placeholder': 'Scan Tube barcode using kiosk scanner'},
                        'input_group_attr': {'class': 'input-group-lg'},
                        'button_text': 'Continue',
                        'button_attr': {'class': 'btn-success btn-lg'},
                        'right_button_icon_class': 'fa fa-fw fa-chevron-right'
                    }) }}
                </div>
            </div>
            <div class="callout callout-danger hidden" id="tube-error-callout">
                <h4>Tube Barcode Error</h4>
                <p></p>
            </div>

            <div id="tubeDetailSelection" class="collapse">
                {{ form_row(form.tubeType, {
                    'label': 'What type of tube are you returning?',
                    'label_attr': {'style': 'font-size: 1.25em;'}
                }) }}


            </div>

            <div id="tubeTimeSelection" class="collapse">
                <div id="date-time-error" class="callout callout-danger hidden" style="text-align:center">
                    <h4>Collection Time Error</h4>
                    <p>You must select a Collection Time in the past</p>
                </div>
                <div class="row row-no-gutters">
                    <div class="col-xs-4 collection-date-widget">
                        {{ form_row(form.collectedAtDate) }}
                    </div>
                    <div class="col-xs-8 collection-time-widget">
                        {{ form_row(form.collectedAtTime) }}
                    </div>
                </div>

            </div>

            <div id="tubeContinueButtons" class="collapse">
                <div class="row">
                    <div class="col-xs-12 text-center">
                        {{ form_row(form.save) }}
                    </div>
                </div>
            </div>

            {{ form_end(form) }}

        {% endblock %}
        </div>
    </div>

    {% block scan_help %}
    {%  include 'kiosk/scan-help.html.twig' with {
        image: 'images/vial-1d-barcode.svg',
        scanTipHtml: 'Scan Tube barcode<br>below the screen'
    } %}
    {% endblock %}


    <style type="text/css">
        #tube-input-group { position: relative; }
        #tube-check-status { position: absolute; right: 1rem; }
    </style>
{% endblock %}

{% block modal %}
    <div class="modal fade" id="cancelDropOff" tabindex="-1" role="dialog" aria-labelledby="cancelLabel" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-red">
                    <h4 class="modal-title text-center" id="cancelLabel"><i class="fa fa-exclamation-triangle"></i> Cancel Drop Off</h4>
                </div>
                <div class="modal-body" style="background-color:#fff !important;color:#111 !important; text-align:center;">
                    Are you sure you want to cancel this drop off?
                </div>
                <div class="modal-footer" style="background-color:#f6f6f6 !important;">
                    <button type="button" class="btn btn-default pull-left" data-dismiss="modal">
                        <i class="fa fa-chevron-left"></i> Go Back
                    </button>

                    <button id="confirm-cancel-dropoff" type="button" class="btn btn-danger pull-right">
                        Yes, cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        // What to do when scanner input
        $(document).on( "scannerinput", function(e, inputString) {
            // We don't want the scanner typing in the input field.
            $("[data-scanner-input]").blur();
            $("[data-scanner-input]").val(inputString).trigger('input');
            $("#kiosk_add_tube_form_accessionId_button").trigger('click');
        });

        $(document).ready(function(){
            setTubeInputStatus();

            // Reset the detail sections when the input is changed
            $("#kiosk_add_tube_form_accessionId").on('input', function() {
                setTubeInputStatus();
                showTubeDetailSelection(false);
            });

            $("#kiosk_add_tube_form_accessionId_button").click(function(){
                var val = $('#kiosk_add_tube_form_accessionId').val();

                if(val !== "") {
                    setTubeInputStatus('LOADING');
                    showTubeDetailSelection(false);

                    $.ajax('{{ path('kiosk_tube_available_check') }}', {
                        method: 'POST',
                        data: { accessionId: val },

                        success: onAvailableCheckResponse,

                        // Unexpected errors like 500 server or network down
                        error: function(xhr, textStatus, error) {
                            console.log("error in response: " + textStatus + " " + error);
                        }
                    });
                } else {
                    // Collapse form details
                    setTubeInputStatus();
                    showTubeDetailSelection(false);
                }
            });

            $("#kiosk_add_tube_form_tubeType").on('input', function(e) {
                if($(e.target).val() !== "") {
                    showTubeTimeSelection(true);
                } else {
                    showTubeTimeSelection(false);
                }
            });

            $("#kiosk_add_tube_form_collectedAtDate, #kiosk_add_tube_form_collectedAtTime").on('input', function(e) {
                let dateVal = $("#kiosk_add_tube_form_collectedAtDate").val();
                let timeVal = $("#kiosk_add_tube_form_collectedAtTime").val();

                // Only continue if both date and time selected
                if (!dateVal || !timeVal) {
                    showTubeContinueButtons(false);
                    return;
                }

                // Check if date/time selected is in the future
                let selected = new Date();
                let year = parseInt(dateVal.slice(0,4), 10);
                let month = parseInt(dateVal.slice(5,7), 10) - 1; // -1 because months are 0-indexed
                let day = parseInt(dateVal.slice(8,10), 10);
                selected.setFullYear(year, month, day);
                let hour = parseInt(timeVal.slice(0,2), 10);
                selected.setHours(hour, 0, 0, 0);

                // Allow next-highest time window to be selected if it's close.
                // For example, if they collected at 11:30am and it's 11:45am,
                // this buffer allows option 12:00pm to be selected, but not 2:00pm.
                let maxFutureTime = new Date();
                let addHours = maxFutureTime.getHours()+1; // +1 hour buffer
                maxFutureTime.setHours(addHours);

                let isSelectedFutureTime = selected > maxFutureTime;
                if (isSelectedFutureTime) {
                    showTubeContinueButtons(false);
                    $("#date-time-error").toggleClass('hidden', false);
                    $("#date-time-error").collapse('show');
                    return false; // Prevent changing radio button
                }

                $("#date-time-error").collapse('hide');
                showTubeContinueButtons(true);
            });

            /**
             * What to do when we get a tube check response from the server
             * @param data AJAX Response Data
             */
            function onAvailableCheckResponse(data) {
                if (data.isError) {
                    setTubeInputStatus('ERROR', data.message);
                    showTubeDetailSelection(false);
                    return;
                }

                showTubeDetailSelection(true);
                setTubeInputStatus('SUCCESS');
            }

            /**
             * Sets the icon in the tube input field and any error message in the callout below the input field
             * @param status Options: LOADING, ERROR, or SUCCESS
             * @param message Error message to show in the callout
             */
            function setTubeInputStatus(status = '', message = '') {
                var statusWrapper = $("#lookup-status");

                statusWrapper.empty();
                $("#tube-error-callout").toggleClass('hidden', true);

                switch (status) {
                    case 'LOADING':
                        statusWrapper.append('<i class="fa fa-fw fa-virus fa-spin"></i>');
                        break;
                    case 'ERROR':
                        statusWrapper.append('<i class="fa fa-fw fa-times text-red"></i>');
                        $("#tube-error-callout").toggleClass('hidden', false);
                        $("#tube-error-callout p").html(message);
                        break;
                    case 'SUCCESS':
                        statusWrapper.append('<i class="fa fa-fw fa-check text-green"></i>');
                        break;
                    default:
                        statusWrapper.append('<i class="fa fa-fw fa-question text-gray"></i>');
                        break;
                }
            }

            /**
             * Shows (and hides) the tube detail section (Tube Type and Time UI) handles display of the scanning hint
             */
            function showTubeDetailSelection(show = true) {
                if (show) {
                    $("#tubeDetailSelection").collapse('show');

                    let initialType = $("#kiosk_add_tube_form_tubeType").attr('value');
                    if (initialType) {
                        $("#kiosk_add_tube_form_tubeType").val(initialType).trigger('input');
                    }

                    $("#scanTip").hide();
                    $("#kiosk_add_tube_form_accessionId_button").hide();
                } else {
                    $("#kiosk_add_tube_form_tubeType").val('').trigger('input');
                    $("#tubeDetailSelection").collapse('hide');
                    $("#scanTip").show();
                    $("#kiosk_add_tube_form_accessionId_button").show();
                }
            }

            /**
             * Shows (and hides) the tube day and time fields and pre-complete buttons
             * @param show
             */
            function showTubeTimeSelection(show = true) {
                if (show) {
                    $("#tubeTimeSelection").collapse('show');

                    let initialDay = $("#kiosk_add_tube_form_collectedAtDate").attr('value');
                    if (initialDay) {
                        $("#kiosk_add_tube_form_collectedAtDate").val(initialDay).trigger('input');
                    }
                } else {
                    $("#kiosk_add_tube_form_collectedAtDate").val('').trigger('input');
                    $("#kiosk_add_tube_form_collectedAtTime").val('').trigger('input');
                    $("#tubeTimeSelection").collapse('hide');
                }
            }

            function showTubeContinueButtons(show = true) {
                if (show) {
                    $("#tubeContinueButtons").collapse('show');
                } else {
                    $("#tubeContinueButtons").collapse('hide');
                }
            }

            // Confirming Cancel does POST to do real cancel
            $('#confirm-cancel-dropoff').on('click', function(e) {
                const url = "{{ path('kiosk_cancel', {id: kioskSession.id}) }}";
                $.post(url)
                    .fail(function(responseObj) {
                        // Error happened, show it
                        const response = responseObj.responseJSON;
                        const errorMsg = response.errorMsg;
                        if (errorMsg) {
                            alert(errorMsg);
                            return;
                        }
                        alert('Cannot Cancel Dropoff. Please use the top-right menu to Refresh the screen.');
                    })
                    .done(function(response) {
                        // Redirect to another screen
                        window.location = response.redirectToUrl;
                    });
            });
        });

    </script>
{% endblock %}