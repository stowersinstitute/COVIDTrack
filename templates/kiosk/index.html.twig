{% extends 'kiosk/kiosk-base.html.twig' %}
{#
todo: ios doesn't allow playing audio until the user has interacted with the page somehow
    If we want to enable a "successful scan" beep we'll need to:
        - have some kind of "start scanning" button for a kiosk admin to click
        - use ajax calls so we never leave the page (since that would reset the permission)
#}

{% block page_title %}COVIDTrack Kiosk{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-md-12">
            {{ form_start(form, { 'attr': {'id': 'groupForm'}}) }}
            {{ form_row(form.participantGroupTitle, {
                'label': false,
                'attr': {'placeholder': 'Scan your QR code using kiosk scanner'},
                'input_group_attr': {'class': 'input-group-lg'},
                'button_text': 'Continue',
                'button_attr': {'class': 'btn-success btn-lg'},
                'right_button_icon_class': 'fa fa-fw fa-chevron-right'
            }) }}
            {{ form_end(form) }}
            <div class="callout callout-danger hidden" id="text-lookup-error-callout">
                <h4>QR Code Error</h4>
                <p></p>
            </div>
        </div>
    </div>

    {% block scan_help %}
    {% include 'kiosk/scan-help.html.twig' with {
        image: 'images/mobile-w-qr.svg',
        scanHintText: 'Set your device\'s screen brightness all the way up.',
        scanTipHtml: 'Scan QR code<br>below the screen'
    }%}
    {% endblock %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        // What to do when scanner input
        $(document).on( "scannerinput", function(e, inputString) {
            // We don't want the scanner typing in the input field.
            $("[data-scanner-input]").blur();
            $("[data-scanner-input]").val(inputString).trigger('input');
            $("#form_participantGroupTitle_button").click();
        });

        $(document).ready(function(){
            let textInput = $("#form_participantGroupTitle");
            let lookupButton = $("#form_participantGroupTitle_button");
            let isFormValid = false;

            setInputStatus();

            // Reset the detail sections when the input is changed
            textInput.on('input', function() {
                setInputStatus();
            });

            // Don't submit the form unless it is valid
            $('#groupForm').on('submit', function(e) {
                if(!isFormValid) {
                    e.preventDefault();
                    return false;
                }
            });

            lookupButton.click(function(){
                let val = textInput.val();

                if(val !== "") {
                    setInputStatus('LOADING');

                    $.ajax('{{ path('kiosk_group_available_check') }}', {
                        method: 'POST',
                        data: { participantGroupTitle: val },

                        success: onAvailableCheckResponse,

                        // Unexpected errors like 500 server or network down
                        error: function(xhr, textStatus, error) {
                            console.log("error in response: " + textStatus + " " + error);
                        }
                    });
                } else {
                    // Collapse form details
                    setInputStatus();
                }
            });

            /**
             * What to do when we get a group check response from the server
             * @param data AJAX Response Data
             */
            function onAvailableCheckResponse(data) {
                if (data.isError) {
                    setInputStatus('ERROR', data.message);
                    return;
                }
                setInputStatus('SUCCESS');
                textInput.parents('form').submit();
            }

            /**
             * Sets the icon in the group input field and any error message in the callout below the input field
             * @param status Options: LOADING, ERROR, or SUCCESS
             * @param message Error message to show in the callout
             */
            function setInputStatus(status = '', message = '') {
                let statusWrapper = $("#lookup-status");
                let errorCallout = $("#text-lookup-error-callout");

                isFormValid = false;

                statusWrapper.empty();
                errorCallout.toggleClass('hidden', true);

                switch (status) {
                    case 'LOADING':
                        statusWrapper.append('<i class="fa fa-fw fa-virus fa-spin"></i>');
                        break;
                    case 'ERROR':
                        statusWrapper.append('<i class="fa fa-fw fa-times text-red"></i>');
                        errorCallout.toggleClass('hidden', false);
                        $("p", errorCallout).html(message);
                        break;
                    case 'SUCCESS':
                        statusWrapper.append('<i class="fa fa-fw fa-check text-green"></i>');
                        isFormValid = true;
                        break;
                    default:
                        statusWrapper.append('<i class="fa fa-fw fa-question text-gray"></i>');
                        break;
                }
            }
        });
    </script>
{% endblock %}