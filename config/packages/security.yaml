security:
    encoders:
        App\Entity\AppUser:
            algorithm: auto
        # Class used to represent in-memory users via provider servicenow_test_provider
        Symfony\Component\Security\Core\User\User: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        servicenow_test_provider:
            memory:
                users:
                    # Password encoded version of: sntest123
                    sntest: { password: '$argon2id$v=19$m=65536,t=4,p=1$b3YL5AeXxIxhlk1x5uh6UA$1cEZIgnODbPYWUPsNhMCM08FoH1gpHl5Ur6azbqIRds', roles: ['ROLE_USER'] }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\AppUser
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # For testing ServiceNow integration
        servicenow_test:
            pattern: ^/(service-now\/test)/
            provider: servicenow_test_provider
            http_basic:
                realm: Secured Area
        main:
            anonymous: lazy
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Must be authenticated as someone to access the system
        - { path: ^/, roles: ROLE_USER }
        # Additional permission checks in controller methods

    # Search for DEPENDS_ON_AVAILABLE_ROLES
    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_ALLOWED_TO_SWITCH
            - ROLE_KIOSK_UI
            - ROLE_PARTICIPANT_GROUP_EDIT
            - ROLE_PRINT_TUBE_LABELS
            - ROLE_PRINT_GROUP_LABELS
            - ROLE_SPECIMEN_VIEW
            - ROLE_SPECIMEN_EDIT
            - ROLE_RESULTS_EDIT
            - ROLE_RESULTS_VIEW
            - ROLE_SPECIMEN_DROP_OFF
            - ROLE_TUBE_CHECK_IN
            - ROLE_REPORTS_GROUP_VIEW
            - ROLE_WELL_PLATE_EDIT
        ROLE_KIOSK_UI:
            - ROLE_SPECIMEN_DROP_OFF
        ROLE_PARTICIPANT_GROUP_EDIT:
            - ROLE_PARTICIPANT_GROUP_VIEW
        ROLE_PARTICIPANT_GROUP_VIEW:
            - ROLE_PARTICIPANT_GROUP_SCHEDULE_VIEW
        ROLE_RESULTS_EDIT:
            - ROLE_RESULTS_VIEW
        ROLE_WELL_PLATE_EDIT:
            - ROLE_WELL_PLATE_VIEW
        ROLE_NOTIFY_ABOUT_VIRAL_RESULTS:
            - ROLE_REPORTS_GROUP_VIEW
        ROLE_NOTIFY_ABOUT_ANTIBODY_RESULTS:
            ~
